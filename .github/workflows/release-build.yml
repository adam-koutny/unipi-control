name: Release build

on:
  push:
    tags:
      - '*'

jobs:
  prepare_build:
    name: Prepare build
    runs-on: ubuntu-latest
    outputs:
      package_name: ${{ steps.global_vars.outputs.package_name }}
      package_alternate_name: ${{ steps.global_vars.outputs.package_alternate_name }}
      package_version: ${{ steps.global_vars.outputs.package_version }}
      release_type: ${{ steps.check-tag.outputs.release_type }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          path: repository
      - name: Set global variables
        id: global_vars
        run: |
          echo "package_name=$(python setup.py --name)" >> $GITHUB_OUTPUT
          echo "package_version=$(python setup.py --version)" >> $GITHUB_OUTPUT
      - name: Check tag ${{ github.ref_name }}
        id: check-tag
        run: |
          tag_version="${{ github.ref_name }}"

          if [ "${tag_version}" != "${{ steps.global_vars.outputs.package_version }}" ]; then
            echo "Version number in package does not match tag! (${tag_version} vs. ${{ steps.global_vars.outputs.package_version }})."
            exit 1
          fi

  build_docker_image:
    name: Build docker image
    needs:
      - prepare_build
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and export docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/arm64
          tags: nuitka-builder
          outputs: type=docker,dest=/tmp/nuitka-builder.tar
      - name: Upload docker image
        uses: actions/upload-artifact@v3
        with:
          name: nuitka-builder
          path: /tmp/nuitka-builder.tar

  build_binary_file:
    name: Build ${{ matrix.console_scripts }} binary file
    needs:
      - prepare_build
      - build_docker_image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        console_scripts:
          - unipi-control
          - unipi-model-info
          - unipi-config-converter
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v2
      - name: Download docker image
        uses: actions/download-artifact@v3
        with:
          name: nuitka-builder
          path: /tmp
      - name: Load docker image
        run: |
          docker load --input /tmp/nuitka-builder.tar
          docker image ls -a
      - name: Build binary files
        run: |
          docker run --rm --privileged \
            -e BUILDER_UID="$(id -u)" -e BUILDER_GID="$(id -g)" \
            -v "${GITHUB_WORKSPACE}:/build" \
            nuitka-builder /build/scripts/entry.sh ${{ matrix.console_scripts }}
          mv output/${{ matrix.console_scripts }}.dist/${{ matrix.console_scripts }} output/${{ matrix.console_scripts }}
      - name: Compress binary files
        run: |
          tar -czvf \
            ${{ matrix.console_scripts }}-${{ needs.prepare_build.outputs.package_version }}.dev${{ env.GITHUB_JOB }}-arm64.tar.gz \
            output/${{ matrix.console_scripts }}
      - name: Upload binary file
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.console_scripts }}
          path: output/${{ matrix.console_scripts }}
      - name: Release compressed binary file
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ matrix.console_scripts }}-${{ needs.prepare_build.outputs.package_version }}.dev${{ env.GITHUB_JOB }}-arm64.tar.gz
          files: ${{ github.workspace }}/${{ matrix.console_scripts }}-${{ needs.prepare_build.outputs.package_version }}.dev${{ env.GITHUB_JOB }}-arm64.tar.gz  # yamllint disable-line rule:line-length

  build_ipk_package:
    name: Build IPK package
    needs:
      - prepare_build
      - build_binary_file
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Cache virtualenv for Python 3.11
        uses: syphar/restore-virtualenv@v1
        id: cache_virtualenv
      - name: Download binary file
        uses: actions/download-artifact@v3
        with:
          path: ${{ github.workspace }}/output
      - name: Install opkg-utils
        run: |
            wget https://git.yoctoproject.org/opkg-utils/snapshot/opkg-utils-0.4.5.tar.gz
            tar xzfv opkg-utils-0.4.5.tar.gz
            make -C opkg-utils-0.4.5 PREFIX=${GITHUB_WORKSPACE} install-utils
      - name: Build OPKG package
        run: |
          mkdir -pv output/ipk/{CONTROL,usr/local/bin}
          (
            echo "Package: ${{ needs.prepare_build.outputs.package_name }}"
            echo "Version: ${{ needs.prepare_build.outputs.package_version }}"
            echo "Architecture: aarch64"
            echo "Maintainer: $(python setup.py --author)"
            echo "Source: $(python setup.py --url)"
            echo "Description: $(python setup.py --description)"
            echo "License: $(python setup.py --license)"
          ) > output/ipk/CONTROL/control
          cp -v output/unipi-control/unipi-control output/ipk/usr/local/bin
          cp -v output/unipi-model-info/unipi-model-info output/ipk/usr/local/bin
          cp -v output/unipi-config-converter/unipi-config-converter output/ipk/usr/local/bin
          sudo chown -R root:root output/ipk
          ${GITHUB_WORKSPACE}/bin/opkg-build -c output/ipk ${GITHUB_WORKSPACE}/output
      - name: Release OPKG package
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.prepare_build.outputs.package_name }}_${{ needs.prepare_build.outputs.package_version }}_aarch64.ipk
          files: ${{ github.workspace }}/output/${{ needs.prepare_build.outputs.package_name }}_${{ needs.prepare_build.outputs.package_version }}_aarch64.ipk  # yamllint disable-line rule:line-length

  build_python_package:
    name: Upload package to PyPi
    needs:
      - prepare_build
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Build package
        run: |
          make build
      - name: Release compressed source file
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.prepare_build.outputs.package_name }}-${{ needs.prepare_build.outputs.package_version }}.tar.gz
          files: ${{ github.workspace }}/output/${{ needs.prepare_build.outputs.package_name }}-${{ needs.prepare_build.outputs.package_version }}.tar.gz  # yamllint disable-line rule:line-length
      - name: Release wheel file
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.prepare_build.outputs.package_alternate_name }}-${{ needs.prepare_build.outputs.package_version }}-py3-none-any.whl  # yamllint disable-line rule:line-length
          files: ${{ github.workspace }}/output/${{ needs.prepare_build.outputs.package_alternate_name }}-${{ needs.prepare_build.outputs.package_version }}-py3-none-any.whl  # yamllint disable-line rule:line-length
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1.6
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
