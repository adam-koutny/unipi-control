[build-system]
requires = ["setuptools >= 65", "setuptools-scm >= 7"]
build-backend = "setuptools.build_meta"

[project]
name = "unipi-control"
description = "Control Unipi I/O directly with MQTT commands."
readme = "README.md"
authors = [
    { name = "Michael Hacker", email = "mh@superbox.one" },
]
license = {text = "Apache-2.0 license"}
keywords = ["mqtt", "modbus", "unipi"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3 :: Only",
    "Operating System :: POSIX :: Linux",
    "Topic :: System :: Networking",
    "Topic :: Utilities",
]
requires-python = ">= 3.8"
dependencies = [
    "asyncio-mqtt==0.16.1",
    "pymodbus[serial]==3.2.2",
    "pyyaml~=6.0",
]
dynamic = ["version"]

[project.scripts]
unipi-control = "unipi_control.unipi_control:main"
unipi-config-backup = "unipi_control.tools.config_backup:main"
unipi-config-converter = "unipi_control.tools.config_converter:main"
unipi-model-info = "unipi_control.tools.model_info:main"

[project.urls]
"Source code" = "https://github.com/superbox-dev/unipi-control"
"Issue tracker" = "https://github.com/superbox-dev/unipi-control/issues"

[project.optional-dependencies]
audit = ["pip-audit"]
format = ["black"]
lint = [
    "mypy",
    "pylint",
    "ruff",
    "types-PyYAML",
    "types-requests",
    "yamllint",
]
tests = [
    "coverage-badge",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "pytest-xdist[psutil]",
]

[tool.setuptools]
packages = ["unipi_control"]

[tool.setuptools_scm]
write_to = "unipi_control/version.py"

[tool.black]
line-length = 120
target-version = ["py38", "py39", "py310", "py311"]

[tool.mypy]
# strict = true
python_version = "3.8"
ignore_missing_imports = true
junit_xml = "reports/mypy.xml"

[tool.pylint.master]
# C0114: missing-module-docstring
# C0115: missing-class-docstring
# C0116: missing-function-docstring
# C0411: wrong-import-order
# E0401: import-error
# R0801: duplicate-code
# R6003: consider-alternative-union-syntax (python 3.8 compatibility)
# W6001: deprecated-typing-alias (python 3.8 compatibility)
disable = ["C0114", "C0115", "C0116", "C0411", "E0401", "R0801", "R6003", "W6001"]
notes = ["FIXME"]

load-plugins = [
    "pylint.extensions.bad_builtin",
    "pylint.extensions.check_elif",
    "pylint.extensions.code_style",
    "pylint.extensions.comparetozero",
    "pylint.extensions.comparison_placement",
    "pylint.extensions.confusing_elif",
    "pylint.extensions.consider_ternary_expression",
    "pylint.extensions.docparams",
    "pylint.extensions.docstyle",
    "pylint.extensions.empty_comment",
    "pylint.extensions.emptystring",
    "pylint.extensions.eq_without_hash",
    "pylint.extensions.for_any_all",
    "pylint.extensions.mccabe",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.private_import",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.set_membership",
    "pylint.extensions.typing"
]

[tool.pylint.reports]
output-format = "colorized"
reports = false
score = true

[tool.pylint.format]
max-line-length = 120

[tool.ruff]
target-version = "py38"
line-length = 120
select = ["ALL"]
ignore = [
    "ANN101", # missing-type-self
    "COM", # trailing-comma
    "D100", # undocumented-public-module
    "D101", # undocumented-public-class
    "D104", # undocumented-public-package
    "D105", # undocumented-magic-method
    "D107", # undocumented-public-init
    "D211", # no-blank-line-before-class
    "D212", # multi-line-summary-first-line
    "D417", # undocumented-param
    "FBT", # boolean-trap
    "TCH", # type-checking
    "T201", # print
    "PLR2004", # magic-value-comparison
    "I001", # unsorted-imports
]

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(levelname)-8s | %(asctime)s: %(message)s"
# https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
addopts = "--color=yes --exitfirst --failed-first --strict-config --strict-markers --junitxml=reports/pytest.xml"

[tool.coverage.run] # https://coverage.readthedocs.io/en/latest/config.html#run
# branch = true
data_file = "reports/.coverage"
omit = ["unipi_control/tools/model_info.py"]

[tool.coverage.report] # https://coverage.readthedocs.io/en/latest/config.html#report
fail_under = 80
show_missing = true
skip_covered = true

[tool.coverage.xml] # https://coverage.readthedocs.io/en/latest/config.html#xml
output = "reports/test-results.xml"
